<?php

namespace Apto\Catalog\Infrastructure\AptoCatalogBundle\Doctrine\Orm;

use Apto\Base\Infrastructure\AptoBaseBundle\Doctrine\Orm\AptoOrmRepository;
use Apto\Catalog\Domain\Core\Model\Shop\Shop;
use Apto\Catalog\Domain\Core\Model\Shop\ShopRepository;

/**
 * ShopRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopOrmRepository extends AptoOrmRepository implements ShopRepository
{
    const ENTITY_CLASS = Shop::class;

    /**
     * @param Shop $model
     */
    public function update(Shop $model)
    {
        /** @phpstan-ignore-next-line */
        $this->_em->merge($model);
    }

    /**
     * @param Shop $model
     */
    public function add(Shop $model)
    {
        $this->_em->persist($model);
    }

    /**
     * @param Shop $model
     */
    public function remove(Shop $model)
    {
        $this->_em->remove($model);
    }

    /**
     * @param mixed|string $id
     * @return Shop|mixed|null|object
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findById($id)
    {
        $builder = $this->createQueryBuilder('Shop')
            ->where('Shop.id.id = :id')
            ->setParameter('id', $id);

        return $builder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param string $domain
     * @return Shop|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByDomain(string $domain)
    {
        $builder = $this->createQueryBuilder('Shop')
            ->where('Shop.domain = :domain')
            ->setParameter('domain', $domain);

        return $builder->getQuery()->getOneOrNullResult();
    }

    /**
     * @param string $domain
     * @return array|mixed|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findConnectorConfigByDomain(string $domain)
    {
        $builder = $this->_em->createQueryBuilder()
            ->select('s.connectorUrl', 's.connectorToken', 's.currency.code AS currency', 's.id.id AS shopId')
            ->from('Apto\Catalog\Domain\Core\Model\Shop\Shop', 's')
            ->where('s.domain = :domain')
            ->setParameter('domain', $domain);

        return $builder->getQuery()->getOneOrNullResult();
    }

}
