------------------------------------------------------------------------------------------------------------------------
Install and config
------------------------------------------------------------------------------------------------------------------------

Installing Cypress on Mac os is like installing any other program, just download and install.
On windows it is the same, but in case of windows + wsl some extra steps are needed. these 4 steps are not required for
mac or windows direct installs.

1.  Install linux packages that cypress needs check here

        https://docs.cypress.io/guides/getting-started/installing-cypress

    Dont forget Linux Prerequisites:
        https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites

2.  Install [x-server] from

        https://sourceforge.net/projects/vcxsrv/

    This gives us visual interface for working with our wsl distro. This is a usual installation like any other
    ".exe" under windows.

3.   In order to connect to our wsl distro x-server needs to know it's ip address (each wsl distro has it). X-server
     requires it to be saved globally in variable named "DISPLAY". And ip we can read from wsl config file located here:

        /etc/resolv.conf

     If we open it, it looks like this:
        # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
        # [network]
        # generateResolvConf = false
        nameserver 172.23.128.1

     Where nameserver is the ip address. We need now read this ip and save it into DISPLAY global. for that open ~/.bashrc

        sudo nano ~/.bashrc

     and in the beginning of the file write:

        export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0

     Restart your wsl distro. if everything is ok then on "echo $DISPLAY" you should see the ip address.

4.   Add records in firewall.

    Control Panel > System and Security > Windows Defender Firewall > Inbound Rules > New Rule
    take "programm", next
    in "this programm path" find "vcxsrv.exe", next
    take "Allow the connection", next
    check all 3 checkboxes: domain, private, public, next
    give some name "cypress-wsl"

    that's all now we can open cypress



------------------------------------------------------------------------------------------------------------------------
Opening cypress
------------------------------------------------------------------------------------------------------------------------

For running/opening cypress we have special commands written in our "Makefile".

    make open-cypress-dev

This changes db name in .env.local DATABASE_URL property and creates new db for testing. name db name is always
the name of db from .env.local plus "-cypress" suffix.

When you finish working on cypress you should run following script to bring back changes mades for cypress in your system:

    make close-cypress



------------------------------------------------------------------------------------------------------------------------
Where shall we write the tests
------------------------------------------------------------------------------------------------------------------------

Right now we have only 2 separate branches for it one for template called : "tests/apto-one-template" and the other for
writing tests for core: "tests/apto-one-core".

Later if we write tests for specific customers we may create separate cypress branches for them as well. They all
should begin with prefix "tests/" followed the customer name. Example: "tests/apto-project-solatex" and so on.



------------------------------------------------------------------------------------------------------------------------
Folder structure
------------------------------------------------------------------------------------------------------------------------

We 3 locations to look for cypress files:

    1. configuration file: cypress.config.ts

    2. 'src/apto-one-core/Tests' folder where we have all our e2e tests and classes for that tests

    3. component test (we dont have now) should be written in component folder together with component/.ts/.html/.sass files.

The most interesting is "Tests" folder are e2e and classes folders. in e2e we write our end-to-end tests in cypress,
in classes folder we have our classes do some test common tests to prevent code duplication.



-------------------------------------------------------------
e2e folder
-------------------------------------------------------------

In this folder, right now we have separated/sorted tests by the pages or section we have: header, footer, product page,
product list page and so on. If we write test for new page we need to create new folder for it.

We have here also "functionalities" folder. here we should write tests that require more than one pages.

"all.cy.ts" file we need to write references to tests files we want to test. With this file we test everything we have
if want it. We can have later other this kind of files, lets say one that runs all backend test the other all frontend
tests and so one.



-------------------------------------------------------------
classes folder
-------------------------------------------------------------

As said we write classes to prevent code duplication for our tests. We try to name classes similar to what they test or
prevent code duplication. for example, we have product class that contains methods that are used in product page testing
in e2e folder. classes that are for page testing are grouped into pages folder.

In commmon folder as the name suggests we have classes that can be used not only in one page but in many. Like in our
main application here we have also divided all common methods into 3 different classes: backend, core, frontend (you
can guess already why). in backend we have methods that are for backend testing only, in frontend only for frontend and
in core methods that can be used both in frontend and in backend.

In elements folder we have classes for testing small pieces of code like form inputs, tables, some custom components
and so on.



------------------------------------------------------------------------------------------------------------------------
Coding advices
------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------
Cypress interceptors
-------------------------------------------------------------

We have class named "RequestHandler" which should be used for making all requests through interceptors. Also in folder
named "message-bus" we have all request endpoints separated into different files. for example all queries should go into
queries class. into requests we should write requests that are not query nor command. and we have also one separate
class for requests related to shopware.

Interception example:
Register it with:

    RequestHandler.registerInterceptions(Product.saveProductRequests);

wait for it and create alias for it with:

    cy.wait(RequestHandler.getAliasesFromRequests(Product.saveProductRequests)).then(($responses: Interception[]) => {
        // your code here
    });



-------------------------------------------------------------
Testing form inputs
-------------------------------------------------------------

For testing form input we have special classes in "src/apto-one-core/Tests/cypress/classes/common/elements/form". All
methods here are written so that you can chain them.

Example "Input":

    Input.getByAttr('product-weight')
        .hasLabel('Gewicht(kg):')
        .hasValue('');

selectbox:

    Select.getByAttr('product-price-calculator')
        .hasLabel('Preisberechnung:')
        .isNotSelected()
        .attributes({'have.attr': 'required'});


We can not only test but also perform some actions on form inputs. this selects from selectbox given value.

    Select.getByAttr('product-price-calculator')
        .select(dummies.defaultPriceCalculator);


this checks the checkbox:

    Checkbox.getByAttr('product-active').check();



-------------------------------------------------------------
Tables
-------------------------------------------------------------

For tables we have a special class as well in common folder. Mostly we search for value in table or perform some
action by clicking action buttons. Checking for some text value in all cells of the table:

     Table.getByAttr('product-list').hasValue(productName1);

product-list must be data-cy attribute given to table's wrapper element.

Clicking on edit button in the row where the given text value "productName1" is found:

    Table.getByAttr('product-list').action(TableActionTypes.EDIT, productName1);



-------------------------------------------------------------
Custom components
-------------------------------------------------------------

Helper classes for custom components should be written in common/elements/custom

for example this media select helper selects the given image

    MediaSelect.getByAttr('product-preview-picture').select('logo.png');







